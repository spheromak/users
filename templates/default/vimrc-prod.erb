" vimrc
"  File gnerated by chef -- changes will be overwritten
"  Local Settings should go in ~/.local_vimrc
"  
"  <%= @u['id'] %> : <%= @u['email'] %>
"
"-------------------------------------------------------------------------------
"
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

imap ;WEM <%= @u['email'] %>
imap ;EM  <%= @u['personal_email'] || "null" %>

" Common typos fixed.
ab teh the
ab fro for
ab nad and 
ab adn and 
ab recipie recipe
ab tempalte template
ab seperate separate

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif


" 15 lines of visible b4 scroll
set scrolloff=15

" This shows spaces and tabs characters. Visual Whitespace.
"set list
"set listchars=tab:»·,trail:·

" Date/Time stamps
" %a - Day of the week
" %b - Month
" %d - Day of the month
" %Y - Year
" %H - Hour
" %M - Minute
" %S - Seconds
" %Z - Time Zone
iab YDATETIME <c-r>=strftime(": %a %b %d, %Y %H:%M:%S %Z")<cr>
map ,L mz1G/Last modifiedYDATETIME
map ,date :let @z=strftime("%A %b %d, %Y")<Cr>"zpa
map ,time :let @z=strftime("%H:%M:%S %Z")<Cr>"zpa

set nowarn
set smartcase
set showmatch

" tab shiz
set softtabstop=2
set shiftwidth=2
set tabstop=2
set paste

" tab close
map gc :tabec<CR>

function MyTabOrComplete() 
  let col = col('.')-1 
  if !col || getline('.')[col-1] !~ '\\k' 
    return \"\\<tab>\" 
  else 
    return \"\\<C-N>\" 
  endif 
endfunction 

inoremap <Tab> <C-R>=MyTabOrComplete()<CR>

" Use spaces instead of tabs
set expandtab

" clear colors and set scheme
hi clear
set t_Co=256
colorscheme jason

if has("gui_gtk2")
  set guifont=Bitstream\ Vera\ Sans\ Mono\ 14
else
  set guifont=Bitstream\ Vera\ Sans\ Mono:h14
endif
set ignorecase
set smartcase
set vb " turns off visual bell
set smartindent
set laststatus=2
set statusline=
set statusline+=%-3.3n\                      " buffer number
set statusline+=%f\                          " filename
set statusline+=%h%m%r%w                     " status flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}] " file type
set statusline+=\ %{fugitive#statusline()}     " fugitive
set statusline+=%=                           " right align remainder
set statusline+=0x%-8B                       " character value
set statusline+=%-14(%l,%c%V%)               " line, character
set statusline+=%<%P                         " file position


compiler ruby


autocmd FileType make     set noexpandtab
autocmd FileType python   set noexpandtab

let g:fuzzy_ignore = "*.log" 
let g:fuzzy_matching_limit = 70
let mapleader=","

let Tlist_GainFocus_On_ToggleOpen=1
let Tlist_Process_File_Always=1
let Tlist_Show_Menu=1
let Tlist_Enable_Fold_Column=0
let g:gist_detect_filetype = 1

set grepprg=ack
set grepformat=%f:%l:%m


" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set backupdir=/tmp

set nobackup		" do not keep a backup file, use versions instead
set history=1000		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " Settings for raw text editing
  autocmd BufRead *\.txt setlocal formatoptions=l
  autocmd BufRead *\.txt setlocal lbr
  autocmd BufRead *\.txt map j gj
  autocmd BufRead *\.txt map k gk
  autocmd BufRead *\.txt setlocal smartindent
  autocmd BufRead *\.txt setlocal spell spelllang=en_us
  

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

  augroup mkd

    autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:>

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

execute 'source  ~/.vim/autotags.vim'
" source custom extensions
if filereadable("~/.local_vimrc")
  execute 'source ~/.local_vimrc'
endif
